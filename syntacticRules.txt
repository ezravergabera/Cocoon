The root has the least priority. bottom has the highest priority.
root            : statements

statements      : NEWLINE* expr  NEWLINE* SEMICOLON ( NEWLINE* expr NEWLINE* SEMICOLON)*

expr            : var-declares
                : rel-expr ((AND | OR) rel-expr)*

var-declares    : num-declare | deci-declare | bool-declare | char-declare | text-declare
                : var-assigns

num-declare     : DTYPE (num | number) ID

deci-declare    : DTYPE: (deci | decimal) ID

bool-declare    : DTYPE: (bool | boolean) ID

char-declare    : DTYPE: (char | character) ID

text-declare    : DTYPE: text ID

var-assigns     : num-assign | deci-assign | bool-assign | char-assign | text-assign

num-assign      : DTYPE:(num | number) ID ASSIGN (expr | KWORD:get)

deci-assign     : DTYPE:(deci | decimal) ID ASSIGN (expr | KWORD:get)

bool-assign     : DTYPE:(bool | boolean) ID ASSIGN (BOOL:(true | false) | KWORD:get)

char-assign     : DTYPE:(char | character) ID ASSIGN (CHAR | KWORD:get)

text-assign     : DTYPE:text ID ASSIGN (STR | KWORD:get)
                
rel-expr        : NOT rel-expr
                : arith-expr ((GREATER | LESS | GREATEREQUAL | LESSEQUAL | EQUALTO | NOTEQUAL) arith-expr)*

arith-expr      : term ((PLUS | MINUS) term)*

term            : factor ((MUL | DIV | INTDIV | MOD) factor)*

factor          : (PLUS|MINUS) factor
                : power

power           : call (EXPO factor)*

call            : atom (LPAREN (expr (COMMA expr)*)? RPAREN)?

atom            : INT | FLOAT | (ID | RWORD: empty | KWORD: show | KWORD: get) | BOOL | STR | CHAR
                : LPAREN expr RPAREN
                : list-expr
                : ask-expr
                : repeat-expr
                : while-expr
                : build-def

ID              : ID (incre-expr|assign-expr)?

list-expr       : LSQUARE (expr (COMMA expr)*)? RSQUARE

ask-expr        : RWORD:ask LPAREN expr RPAREN (NWORD:do)? LSQUARE
                  (expr SEMICOLON (RSQUARE | statements RSQUARE) askmore-expr|more-expr|SEMICOLON)
                | NEWLINE statements RSQUARE (askmore-expr|more-expr|SEMICOLON)

askmore-expr    : RWORD:askmore LPAREN expr RPAREN (NWORD:do)? LSQUARE
                  (expr SEMICOLON (RSQUARE | statements RSQUARE) askmore-expr|more-expr|SEMICOLON)
                | NEWLINE statements RSQUARE (askmore-expr|more-expr|SEMICOLON)

more-expr       : RWORD:more LSQUARE 
                  expr SEMICOLON (RSQUARE | statements RSQUARE)
                | NEWLINE statements RSQUARE

repeat-expr     : RWORD:repeat LPAREN num-assign; var_name; expr RPAREN LSQUARE
                  expr SEMICOLON (RSQUARE | statements RSQUARE)
                | (NEWLINE statements RSQUARE)

while-expr      : RWORD:while LPAREN expr RPAREN (NWORD:do)? LSQUARE
                  expr SEMICOLON (RSQUARE | statements RSQUARE)
                | (NEWLINE statements RSQUARE)

incre-expr      : ID PLUS PLUS | ID MINUS MINUS

assign-expr     : ID ASSIGN (expr | ask-expr)

build-def       : RWORD:build ID?
                  LPAREN (ID (COMMA ID)*)? RPAREN
                  (LSQUARE expr)
                | (NEWLINE statements RSQUARE)